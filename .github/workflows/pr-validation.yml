name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled, unlabeled]
    branches: [main]

jobs:
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate branch name and PR title
        run: |
          # Get branch name
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch: $BRANCH_NAME"
          
          # Check branch name format
          if ! echo "$BRANCH_NAME" | grep -E "^(feature|fix|docs|refactor|ci|chore|test)/[a-z0-9-]+" > /dev/null; then
            echo "Error: Branch name doesn't follow the pattern: (feature|fix|docs|refactor|ci|chore|test)/name"
            echo "Examples: feature/login-page, fix/auth-bug"
            exit 1
          fi
          
          # Get PR title
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR title: $PR_TITLE"
          
          # Check PR title format (conventional commits)
          if ! echo "$PR_TITLE" | grep -Ei "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\\([a-z0-9-]+\\))?: [A-Za-z]" > /dev/null; then
            echo "Error: PR title must follow the conventional commit format"
            echo "Examples: 'feat: Add user login' or 'fix(auth): Fix password reset'"
            exit 1
          fi
          
          echo "Validation passed: Branch name and PR title are correctly formatted"
  
  check-version-labels:
    name: Check Version Labels
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    
    steps:
      - name: Check for version labels
        id: check-label
        uses: actions/github-script@v6
        with:
          script: |
            const versionLabels = ['version:major', 'version:minor', 'version:patch', 'version:patch_level'];
            const labels = context.payload.pull_request.labels.map(label => label.name);
            const PR_TITLE = context.payload.pull_request.title;
            
            // Find if PR has any version label
            const versionLabel = labels.find(label => versionLabels.includes(label));
            
            // Skip this check for specific PR types
            if (PR_TITLE.match(/^(docs|chore|ci|test):/i)) {
              console.log("PR type doesn't require version label, skipping check");
              return;
            }
            
            // For feat, fix, etc. PRs, enforce version label
            if (!versionLabel) {
              // Detect PR type to suggest appropriate version label
              let suggestedLabel = 'version:patch';
              if (PR_TITLE.startsWith('feat:')) {
                suggestedLabel = 'version:minor';
              } else if (PR_TITLE.includes('BREAKING CHANGE')) {
                suggestedLabel = 'version:major';
              }
              
              core.setFailed(`
⚠️ CRITICAL VERSION LABEL REQUIRED ⚠️

This PR is missing a version label, which will BREAK our versioning process if merged.
Based on your PR title "${PR_TITLE}", we recommend: ${suggestedLabel}

Please add EXACTLY ONE of these labels to your PR:
- version:major - For breaking changes
- version:minor - For new features (feat: PRs)
- version:patch - For bug fixes (fix: PRs) 
- version:patch_level - For minor tweaks and documentation

Without this label, the changes will remain in Unreleased section after merge, 
breaking our automated versioning. See PR #115 for a real-world example of this failure.

How to add a label:
1. Go to the right sidebar of this PR
2. Click "Labels"
3. Select the appropriate label (${suggestedLabel} recommended)
`);
            } else {
              console.log(`✅ PR has version label: ${versionLabel}`);
            }
  
  check-changelog:
    name: Check CHANGELOG
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check CHANGELOG.md update
        run: |
          # Get PR title for type detection
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR title: $PR_TITLE"
          
          # Skip this check for specific PR types
          if echo "$PR_TITLE" | grep -E "^(docs|chore|ci|test):" > /dev/null; then
            echo "PR type doesn't require CHANGELOG update, skipping check"
            exit 0
          fi
          
          # Check if CHANGELOG.md was modified
          if ! git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep "CHANGELOG.md" > /dev/null; then
            echo "Error: CHANGELOG.md was not updated"
            echo "Please add an entry for your changes to the [Unreleased] section of CHANGELOG.md"
            exit 1
          fi
          
          echo "CHANGELOG.md has been updated correctly"
          
      - name: Verify unreleased changes
        run: |
          # Skip this check for specific PR types
          PR_TITLE="${{ github.event.pull_request.title }}"
          if echo "$PR_TITLE" | grep -E "^(docs|chore|ci|test):" > /dev/null; then
            echo "PR type doesn't require validation of unreleased changes, skipping check"
            exit 0
          fi
          
          # Run the changelog verification script
          chmod +x .github/workflows/scripts/check-changelog.sh
          .github/workflows/scripts/check-changelog.sh --pr-mode