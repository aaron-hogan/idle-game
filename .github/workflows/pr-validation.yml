name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled, unlabeled]
    branches: [main]

jobs:
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate branch name and PR title
        run: |
          # Get branch name
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch: $BRANCH_NAME"
          
          # Check branch name format
          if ! echo "$BRANCH_NAME" | grep -E "^(feature|fix|docs|refactor|ci|chore|test)/[a-z0-9-]+" > /dev/null; then
            echo "Error: Branch name doesn't follow the pattern: (feature|fix|docs|refactor|ci|chore|test)/name"
            echo "Examples: feature/login-page, fix/auth-bug"
            exit 1
          fi
          
          # Get PR title
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR title: $PR_TITLE"
          
          # Check PR title format (conventional commits)
          if ! echo "$PR_TITLE" | grep -Ei "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\\([a-z0-9-]+\\))?: [A-Za-z]" > /dev/null; then
            echo "Error: PR title must follow the conventional commit format"
            echo "Examples: 'feat: Add user login' or 'fix(auth): Fix password reset'"
            exit 1
          fi
          
          echo "Validation passed: Branch name and PR title are correctly formatted"
  
  check-conventional-title:
    name: Check Conventional PR Title
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    
    steps:
      - name: Check PR title format
        id: check-title
        uses: actions/github-script@v6
        with:
          script: |
            // This is a transitional job that just succeeds for now
            // The actual validation is done by the validate-pr-title.yml workflow
            
            const PR_TITLE = context.payload.pull_request.title;
            console.log(`PR title: ${PR_TITLE}`);
            
            // Detect PR type to determine version impact
            let versionImpact = "none";
            if (PR_TITLE.match(/^feat!:/i) || PR_TITLE.includes('BREAKING CHANGE')) {
              versionImpact = "major";
            } else if (PR_TITLE.match(/^feat:/i)) {
              versionImpact = "minor";
            } else if (PR_TITLE.match(/^fix:/i)) {
              versionImpact = "patch";
            }
            
            if (versionImpact !== "none") {
              console.log(`This PR will trigger a ${versionImpact} version bump when merged`);
            } else {
              console.log("This PR will not trigger a version bump");
            }
            
            // Always succeed - the validate-pr-title.yml workflow will handle validation
            console.log("✅ Using streamlined versioning: PR title is used to determine version bump");
            console.log("✅ You no longer need to add version labels to PRs");
  
  check-pr-description:
    name: Check PR Description
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check PR description for changelog entry
        uses: actions/github-script@v6
        with:
          script: |
            const PR_TITLE = context.payload.pull_request.title;
            const PR_BODY = context.payload.pull_request.body || '';
            
            console.log(`PR title: ${PR_TITLE}`);
            
            // Skip check for specific PR types that don't need changelog entries
            if (PR_TITLE.match(/^(docs|chore|ci|test):/i)) {
              console.log("PR type doesn't require changelog entry, skipping check");
              return;
            }
            
            // Check if PR body contains a changelog entry section
            if (!PR_BODY.includes('## Changelog Entry')) {
              core.setFailed(`
              ⚠️ MISSING CHANGELOG ENTRY ⚠️
              
              PRs with type 'feat:', 'fix:', etc. require a changelog entry in the PR description.
              
              Please add a "## Changelog Entry" section to your PR description with appropriate
              subsections (Added, Changed, Fixed, etc.) that describe your changes.
              
              Example:
              
              ## Changelog Entry
              
              ### Added
              - New feature description
              
              ### Fixed
              - Bug fix description
              
              This section will be automatically included in the CHANGELOG.md file.
              `);
            } else {
              console.log("✅ PR description contains changelog entry section");
              
              // Extract the changelog entry section and check it's not empty
              const changelogSection = PR_BODY.match(/## Changelog Entry([\s\S]*?)(?:##|$)/);
              if (changelogSection && changelogSection[1].trim()) {
                console.log("✅ Changelog entry contains content");
              } else {
                core.setFailed("Changelog entry section is empty. Please add content.");
              }
            }