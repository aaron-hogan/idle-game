name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled, unlabeled]
    branches: [main]

jobs:
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate branch name and PR title
        run: |
          # Get branch name
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch: $BRANCH_NAME"
          
          # Check branch name format
          if ! echo "$BRANCH_NAME" | grep -E "^(feature|fix|docs|refactor|ci|chore|test)/[a-z0-9-]+" > /dev/null; then
            echo "Error: Branch name doesn't follow the pattern: (feature|fix|docs|refactor|ci|chore|test)/name"
            echo "Examples: feature/login-page, fix/auth-bug"
            exit 1
          fi
          
          # Get PR title
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR title: $PR_TITLE"
          
          # Check PR title format (conventional commits)
          if ! echo "$PR_TITLE" | grep -Ei "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\\([a-z0-9-]+\\))?: [A-Za-z]" > /dev/null; then
            echo "Error: PR title must follow the conventional commit format"
            echo "Examples: 'feat: Add user login' or 'fix(auth): Fix password reset'"
            exit 1
          fi
          
          echo "Validation passed: Branch name and PR title are correctly formatted"
  
  check-conventional-title:
    name: Check Conventional PR Title
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    
    steps:
      - name: Check PR title format
        id: check-title
        uses: actions/github-script@v6
        with:
          script: |
            // This is a transitional job that just succeeds for now
            // The actual validation is done by the validate-pr-title.yml workflow
            
            const PR_TITLE = context.payload.pull_request.title;
            console.log(`PR title: ${PR_TITLE}`);
            
            // Detect PR type to determine version impact
            let versionImpact = "none";
            if (PR_TITLE.match(/^feat!:/i) || PR_TITLE.includes('BREAKING CHANGE')) {
              versionImpact = "major";
            } else if (PR_TITLE.match(/^feat:/i)) {
              versionImpact = "minor";
            } else if (PR_TITLE.match(/^fix:/i)) {
              versionImpact = "patch";
            }
            
            if (versionImpact !== "none") {
              console.log(`This PR will trigger a ${versionImpact} version bump when merged`);
            } else {
              console.log("This PR will not trigger a version bump");
            }
            
            // Always succeed - the validate-pr-title.yml workflow will handle validation
            console.log("✅ Using streamlined versioning: PR title is used to determine version bump");
            console.log("✅ You no longer need to add version labels to PRs");
  
  check-pr-description:
    name: Check PR Description
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check PR description for changelog entry
        uses: actions/github-script@v6
        with:
          script: |
            const PR_TITLE = context.payload.pull_request.title;
            const PR_BODY = context.payload.pull_request.body || '';
            
            console.log(`PR title: ${PR_TITLE}`);
            
            // Skip check for specific PR types that don't need changelog entries
            if (PR_TITLE.match(/^(docs|chore|ci|test|style):/i)) {
              console.log("PR type doesn't require changelog entry, skipping check");
              return;
            }
            
            // Use new ultra-simple changelog approach:
            // The first non-empty, non-heading line of the PR description is the changelog entry
            
            const bodyLines = PR_BODY.split('\n');
            let foundNonHeadingLine = false;
            
            for (const line of bodyLines) {
              const trimmedLine = line.trim();
              
              // Skip empty lines and heading lines
              if (trimmedLine === '' || trimmedLine.startsWith('#') || trimmedLine.includes('⚠️')) {
                continue;
              }
              
              // Found the first non-empty, non-heading line
              foundNonHeadingLine = true;
              console.log(`✅ Found changelog entry in first line: "${trimmedLine}"`);
              break;
            }
            
            if (!foundNonHeadingLine) {
              // Fallback: Check for traditional format (for backward compatibility)
              if (PR_BODY.includes('## Changelog Entry') && 
                 (PR_BODY.includes('### Added') || 
                  PR_BODY.includes('### Changed') || 
                  PR_BODY.includes('### Fixed') || 
                  PR_BODY.includes('### Removed'))) {
                
                console.log("✅ Found traditional changelog entry section with subsections");
                return;
              }
              
              core.setFailed(`
              ❌ PR description must contain at least one non-empty line that is not a heading.
              
              Following our ultra-simple changelog approach:
              1. The first non-heading line after the PR title will be used as the changelog entry
              2. It will be categorized automatically based on your PR title
              
              Alternatively, you can still use the traditional format with explicit sections:
              
              ## Changelog Entry
              
              ### Added
              - Feature description
              
              ### Fixed 
              - Bug fix description
              `);
            }