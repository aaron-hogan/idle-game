name: Streamlined Versioning

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  process-merged-pr:
    name: Process Merged PR
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Determine version bump type
        id: version-bump
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          
          # Determine bump type from PR title
          if [[ "$PR_TITLE" =~ ^feat\!: || "$PR_TITLE" =~ ^BREAKING\ CHANGE ]]; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Version bump type: MAJOR (breaking change)"
          elif [[ "$PR_TITLE" =~ ^feat: ]]; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Version bump type: MINOR (new feature)"
          elif [[ "$PR_TITLE" =~ ^fix: ]]; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump type: PATCH (bug fix)"
          else
            echo "bump_type=none" >> $GITHUB_OUTPUT
            echo "No version bump needed (docs, chore, etc.)"
          fi
          
      - name: Extract changelog entry
        id: changelog
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Extracting changelog entry from PR description..."
          
          # Simplest possible extraction approach - look for fixed patterns
          if [[ "$PR_BODY" == *"## Changelog Entry"* && "$PR_BODY" == *"### "* ]]; then
            # PR has a changelog entry section with subsections
            echo "Found changelog entry in PR description."
            
            # Extract from after "## Changelog Entry" to either the next heading or end of string
            CHANGELOG_TEXT=$(echo "$PR_BODY" | sed -n '/## Changelog Entry/,/## /p' | grep -v "^## Changelog Entry" | grep -v "^## ")
            
            # If we didn't match anything, try getting everything after changelog entry
            if [ -z "$CHANGELOG_TEXT" ]; then
              CHANGELOG_TEXT=$(echo "$PR_BODY" | sed -n '/## Changelog Entry/,$p' | grep -v "^## Changelog Entry")
            fi
            
            # Save the changelog entry (trimmed)
            CHANGELOG_ENTRY=$(echo "$CHANGELOG_TEXT" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          else
            # Fallback to using PR title to generate a changelog entry
            echo "No changelog entry found in PR description. Using PR title as fallback."
            
            # Extract type and description from PR title
            if [[ "$PR_TITLE" =~ ^feat: ]]; then
              TYPE="feat"
              DESCRIPTION=$(echo "$PR_TITLE" | sed 's/^feat: //')
              CHANGELOG_ENTRY="### Added
- $DESCRIPTION"
            elif [[ "$PR_TITLE" =~ ^fix: ]]; then
              TYPE="fix"
              DESCRIPTION=$(echo "$PR_TITLE" | sed 's/^fix: //')
              CHANGELOG_ENTRY="### Fixed
- $DESCRIPTION"
            else
              # Default to "Changed" for any other type
              DESCRIPTION=$(echo "$PR_TITLE" | sed 's/^[^:]*: //')
              CHANGELOG_ENTRY="### Changed
- $DESCRIPTION"
            fi
          fi
          
          # Save to file for later use
          echo "$CHANGELOG_ENTRY" > changelog_entry.txt
          echo "Changelog entry extracted:"
          cat changelog_entry.txt
          
      - name: Bump version
        if: steps.version-bump.outputs.bump_type != 'none'
        id: bump-version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "Current version: $CURRENT_VERSION"
          
          # Handle possible pre-release versions like X.Y.Z-N
          BASE_VERSION=$(echo "$CURRENT_VERSION" | cut -d'-' -f1)
          
          # Calculate new version based on bump type
          if [ "${{ steps.version-bump.outputs.bump_type }}" == "major" ]; then
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            NEW_VERSION="$((version_parts[0] + 1)).0.0"
          elif [ "${{ steps.version-bump.outputs.bump_type }}" == "minor" ]; then
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            NEW_VERSION="${version_parts[0]}.$((version_parts[1] + 1)).0"
          elif [ "${{ steps.version-bump.outputs.bump_type }}" == "patch" ]; then
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$((version_parts[2] + 1))"
          else
            NEW_VERSION="$CURRENT_VERSION"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
          # Update version in package.json
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json')); pkg.version = '$NEW_VERSION'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"
          echo "Updated version in package.json"
          
      - name: Update CHANGELOG.md
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          echo "Updating CHANGELOG.md with version $NEW_VERSION ($DATE)"
          
          # Reset any unstaged changes to avoid git conflicts
          git reset --hard HEAD
          
          # Make sure we have the latest version of the files
          git fetch origin main
          git checkout main
          git pull origin main
          
          # Check if Unreleased section exists
          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "Error: CHANGELOG.md does not have an [Unreleased] section"
            exit 1
          fi
          
          # Get the changelog entry from our file
          CHANGELOG_ENTRY=$(cat changelog_entry.txt)
          
          # Simple string-based search and replace approach
          # 1. Replace Unreleased section with new content
          sed -i 's/## \[Unreleased\]/## [Unreleased]\n\n*No unreleased changes at this time.*\n\n## ['"$NEW_VERSION"'] - '"$DATE"'/' CHANGELOG.md
          
          # 2. Insert changelog entry after the newly created version header
          awk -v ver="## [$NEW_VERSION] - $DATE" -v entry="$CHANGELOG_ENTRY" '
          {
            print $0
            if ($0 ~ ver) {
              print ""
              print entry
            }
          }' CHANGELOG.md > temp_changelog.md
          
          # 3. Replace the original file
          cp temp_changelog.md CHANGELOG.md
          rm temp_changelog.md
          
          # Update package.json with the new version
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json')); pkg.version = '$NEW_VERSION'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"
          
          echo "CHANGELOG.md and package.json updated successfully"
          
      - name: Commit and push changes
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Stage and commit the changes
          git add CHANGELOG.md package.json
          git commit -m "chore: bump version to ${{ steps.bump-version.outputs.new_version }}"
          
          # Push directly to main (since we're already on main branch)
          git push origin main
          
          echo "Changes committed and pushed to main"
          
      - name: Create tag
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          # Ensure we're on the latest commit
          git pull origin main
          
          # Create and push the tag
          git tag "v${{ steps.bump-version.outputs.new_version }}"
          git push origin "v${{ steps.bump-version.outputs.new_version }}"
          
          echo "Tag v${{ steps.bump-version.outputs.new_version }} created and pushed"
          
      - name: Comment on PR
        if: steps.version-bump.outputs.bump_type != 'none'
        uses: actions/github-script@v6
        with:
          script: |
            const newVersion = "${{ steps.bump-version.outputs.new_version }}";
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Streamlined Versioning Complete!**\n\nVersion bumped to **v${newVersion}**\n\nChanges have been automatically committed to main and tagged.`
            });