name: Streamlined Versioning

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  process-merged-pr:
    name: Process Merged PR
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Determine version bump type
        id: version-bump
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          
          # Determine bump type from PR title
          if [[ "$PR_TITLE" =~ ^feat\!: || "$PR_TITLE" =~ ^BREAKING\ CHANGE ]]; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Version bump type: MAJOR (breaking change)"
          elif [[ "$PR_TITLE" =~ ^feat: ]]; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Version bump type: MINOR (new feature)"
          elif [[ "$PR_TITLE" =~ ^fix: ]]; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump type: PATCH (bug fix)"
          else
            echo "bump_type=none" >> $GITHUB_OUTPUT
            echo "No version bump needed (docs, chore, etc.)"
          fi
          
      - name: Extract changelog entry
        id: changelog
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          # Save PR body to a file to work with it safely
          echo '${{ github.event.pull_request.body }}' > pr_body.txt
          
          # Create a script to process the PR body and extract changelog
          cat > extract_changelog.sh << 'EOF'
          #!/bin/bash
          PR_BODY=$(cat pr_body.txt)
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Check if PR body contains changelog entry section
          if grep -q "## Changelog Entry" pr_body.txt; then
            echo "Found changelog entry section"
            # Use a temporary file approach to extract content
            sed -n '/## Changelog Entry/,/^## /p' pr_body.txt | grep -v "^## Changelog Entry" | grep -v "^## " > changelog_content.txt
            
            # If nothing was extracted (e.g., changelog at end of PR), get everything after the header
            if [ ! -s changelog_content.txt ]; then
              sed -n '/## Changelog Entry/,$p' pr_body.txt | grep -v "^## Changelog Entry" > changelog_content.txt
            fi
            
            # Check if we got changelog content with any of the expected headers
            if grep -q "### " changelog_content.txt; then
              echo "Using changelog entry from PR description"
              cat changelog_content.txt > changelog_entry.txt
            else
              echo "Changelog section found but no content - fallback to PR title"
              GOTO_FALLBACK=1
            fi
          else
            echo "No changelog section found - fallback to PR title"
            GOTO_FALLBACK=1
          fi
          
          # Fallback to PR title if needed
          if [ "${GOTO_FALLBACK:-0}" == "1" ]; then
            if [[ "$PR_TITLE" =~ ^feat: ]]; then
              DESCRIPTION=$(echo "$PR_TITLE" | sed 's/^feat: //')
              echo "### Added" > changelog_entry.txt
              echo "- $DESCRIPTION" >> changelog_entry.txt
            elif [[ "$PR_TITLE" =~ ^fix: ]]; then
              DESCRIPTION=$(echo "$PR_TITLE" | sed 's/^fix: //')
              echo "### Fixed" > changelog_entry.txt
              echo "- $DESCRIPTION" >> changelog_entry.txt
            else
              DESCRIPTION=$(echo "$PR_TITLE" | sed 's/^[^:]*: //')
              echo "### Changed" > changelog_entry.txt
              echo "- $DESCRIPTION" >> changelog_entry.txt
            fi
          fi
          
          echo "Extracted changelog entry:"
          cat changelog_entry.txt
          EOF
          
          # Make script executable and run it
          chmod +x extract_changelog.sh
          ./extract_changelog.sh
          
      - name: Bump version
        if: steps.version-bump.outputs.bump_type != 'none'
        id: bump-version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "Current version: $CURRENT_VERSION"
          
          # Handle possible pre-release versions like X.Y.Z-N
          BASE_VERSION=$(echo "$CURRENT_VERSION" | cut -d'-' -f1)
          
          # Calculate new version based on bump type
          if [ "${{ steps.version-bump.outputs.bump_type }}" == "major" ]; then
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            NEW_VERSION="$((version_parts[0] + 1)).0.0"
          elif [ "${{ steps.version-bump.outputs.bump_type }}" == "minor" ]; then
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            NEW_VERSION="${version_parts[0]}.$((version_parts[1] + 1)).0"
          elif [ "${{ steps.version-bump.outputs.bump_type }}" == "patch" ]; then
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$((version_parts[2] + 1))"
          else
            NEW_VERSION="$CURRENT_VERSION"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
          # Update version in package.json
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json')); pkg.version = '$NEW_VERSION'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"
          echo "Updated version in package.json"
          
      - name: Update CHANGELOG.md
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          echo "Updating CHANGELOG.md with version $NEW_VERSION ($DATE)"
          
          # Reset any unstaged changes to avoid git conflicts
          git reset --hard HEAD
          
          # Make sure we have the latest version of the files
          git fetch origin main
          git checkout main
          git pull origin main
          
          # Create a script to update the changelog safely
          cat > update_changelog.sh << 'EOF'
          #!/bin/bash
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Check if Unreleased section exists
          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "Error: CHANGELOG.md does not have an [Unreleased] section"
            exit 1
          fi
          
          # Create new changelog content
          (
            # Get everything up to and including the Unreleased header
            sed -n '1,/## \[Unreleased\]/p' CHANGELOG.md
            
            # Add placeholder for Unreleased
            echo
            echo "*No unreleased changes at this time.*"
            echo
            
            # Add the new version header
            echo "## [$NEW_VERSION] - $DATE"
            echo
            
            # Add the changelog entry without any placeholder text
            cat changelog_entry.txt
            
            # Get the rest of the file (everything after Unreleased)
            # Skip the Unreleased section and start from the next heading
            sed -n '/## \[[0-9]/,$p' CHANGELOG.md
          ) > CHANGELOG.md.new
          
          # Replace original with new version
          mv CHANGELOG.md.new CHANGELOG.md
          EOF
          
          # Make the script executable and run it
          chmod +x update_changelog.sh
          ./update_changelog.sh
          
          # Update package.json with new version (again to be safe)
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json')); pkg.version = '$NEW_VERSION'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"
          
          echo "CHANGELOG.md and package.json updated successfully"
          
      - name: Commit and push changes
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Stage and commit the changes
          git add CHANGELOG.md package.json
          git commit -m "chore: bump version to ${{ steps.bump-version.outputs.new_version }}"
          
          # Push directly to main (since we're already on main branch)
          git push origin main
          
          echo "Changes committed and pushed to main"
          
      - name: Create tag
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          # Ensure we're on the latest commit
          git pull origin main
          
          # Create and push the tag
          git tag "v${{ steps.bump-version.outputs.new_version }}"
          git push origin "v${{ steps.bump-version.outputs.new_version }}"
          
          echo "Tag v${{ steps.bump-version.outputs.new_version }} created and pushed"
          
      - name: Comment on PR
        if: steps.version-bump.outputs.bump_type != 'none'
        uses: actions/github-script@v6
        with:
          script: |
            const newVersion = "${{ steps.bump-version.outputs.new_version }}";
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Streamlined Versioning Complete!**\n\nVersion bumped to **v${newVersion}**\n\nChanges have been automatically committed to main and tagged.`
            });