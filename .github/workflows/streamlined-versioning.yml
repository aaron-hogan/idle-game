name: Streamlined Versioning

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  process-merged-pr:
    name: Process Merged PR
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Determine version bump type
        id: version-bump
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          
          # Determine bump type from PR title
          if [[ "$PR_TITLE" =~ ^feat\!: || "$PR_TITLE" =~ ^BREAKING\ CHANGE ]]; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Version bump type: MAJOR (breaking change)"
          elif [[ "$PR_TITLE" =~ ^feat: ]]; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Version bump type: MINOR (new feature)"
          elif [[ "$PR_TITLE" =~ ^fix: ]]; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump type: PATCH (bug fix)"
          else
            echo "bump_type=none" >> $GITHUB_OUTPUT
            echo "No version bump needed (docs, chore, etc.)"
          fi
          
      - name: Extract changelog entry
        id: changelog
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          echo "Extracting changelog entry from PR description..."
          
          # Create a temporary file with the PR body to avoid shell interpretation issues
          echo "$PR_BODY" > pr_body.txt
          
          # Safer extraction of changelog section without relying on shell interpretation
          CHANGELOG_SECTION=""
          CAPTURE=0
          
          while IFS= read -r line; do
            if [[ "$line" == "## Changelog Entry" ]]; then
              CAPTURE=1
              continue
            elif [[ "$line" =~ ^## ]]; then
              if [[ $CAPTURE -eq 1 ]]; then
                CAPTURE=0
              fi
            fi
            
            if [[ $CAPTURE -eq 1 ]]; then
              CHANGELOG_SECTION="${CHANGELOG_SECTION}${line}
"
            fi
          done < pr_body.txt
          
          # Remove leading/trailing whitespace
          CHANGELOG_ENTRY=$(echo "$CHANGELOG_SECTION" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          
          if [ -z "$CHANGELOG_ENTRY" ]; then
            echo "No changelog entry found in PR description. Using PR title as fallback."
            PR_TITLE="${{ github.event.pull_request.title }}"
            TYPE=$(echo "$PR_TITLE" | sed -E 's/^(feat|fix|docs|chore|refactor|style|perf|test|build|ci|revert)(\!)?:.*/\1/')
            DESCRIPTION=$(echo "$PR_TITLE" | sed -E 's/^(feat|fix|docs|chore|refactor|style|perf|test|build|ci|revert)(\!)?://' | sed -e 's/^[[:space:]]*//')
            
            case "$TYPE" in
              feat)
                CHANGELOG_ENTRY="### Added
- $DESCRIPTION"
                ;;
              fix)
                CHANGELOG_ENTRY="### Fixed
- $DESCRIPTION"
                ;;
              refactor|perf)
                CHANGELOG_ENTRY="### Changed
- $DESCRIPTION"
                ;;
              docs|chore|style|test|build|ci|revert)
                CHANGELOG_ENTRY="### Changed
- $DESCRIPTION"
                ;;
              *)
                CHANGELOG_ENTRY="### Changed
- $DESCRIPTION"
                ;;
            esac
          fi
          
          # Save to file for later use - avoid using echo -e which can cause issues
          echo "$CHANGELOG_ENTRY" > changelog_entry.txt
          echo "Changelog entry:"
          cat changelog_entry.txt
          
      - name: Bump version
        if: steps.version-bump.outputs.bump_type != 'none'
        id: bump-version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "Current version: $CURRENT_VERSION"
          
          # Handle possible pre-release versions like X.Y.Z-N
          BASE_VERSION=$(echo "$CURRENT_VERSION" | cut -d'-' -f1)
          
          # Calculate new version based on bump type
          if [ "${{ steps.version-bump.outputs.bump_type }}" == "major" ]; then
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            NEW_VERSION="$((version_parts[0] + 1)).0.0"
          elif [ "${{ steps.version-bump.outputs.bump_type }}" == "minor" ]; then
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            NEW_VERSION="${version_parts[0]}.$((version_parts[1] + 1)).0"
          elif [ "${{ steps.version-bump.outputs.bump_type }}" == "patch" ]; then
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$((version_parts[2] + 1))"
          else
            NEW_VERSION="$CURRENT_VERSION"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
          # Update version in package.json
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json')); pkg.version = '$NEW_VERSION'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"
          echo "Updated version in package.json"
          
      - name: Update CHANGELOG.md
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          echo "Updating CHANGELOG.md with version $NEW_VERSION ($DATE)"
          
          # Reset any unstaged changes to avoid git conflicts
          git reset --hard HEAD
          
          # Make sure we have the latest version of the files
          git fetch origin main
          git checkout main
          git pull origin main
          
          # Check if Unreleased section exists
          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "Error: CHANGELOG.md does not have an [Unreleased] section"
            exit 1
          fi
          
          # Load the changelog entry from the file
          CHANGELOG_ENTRY=$(cat changelog_entry.txt)
          
          # Create a temporary file for building the new changelog
          touch new_changelog.md
          
          # Process CHANGELOG.md line by line to insert new version safely
          FOUND_UNRELEASED=0
          while IFS= read -r line; do
            # Add line to new changelog
            echo "$line" >> new_changelog.md
            
            # If this is the Unreleased section heading, add unreleased placeholder and new version
            if [[ "$line" == "## [Unreleased]" ]]; then
              FOUND_UNRELEASED=1
              echo "" >> new_changelog.md
              echo "*No unreleased changes at this time.*" >> new_changelog.md
              echo "" >> new_changelog.md
              echo "## [$NEW_VERSION] - $DATE" >> new_changelog.md
              echo "" >> new_changelog.md
              # Add the changelog entry
              echo "$CHANGELOG_ENTRY" >> new_changelog.md
              echo "" >> new_changelog.md
            fi
          done < CHANGELOG.md
          
          # Replace the original with our new version
          mv new_changelog.md CHANGELOG.md
          
          # Update package.json to ensure it has the right version
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json')); pkg.version = '$NEW_VERSION'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"
          
          echo "CHANGELOG.md and package.json updated successfully"
          echo "Added version $NEW_VERSION with changelog entry"
          echo "Changelog entry:"
          echo "$CHANGELOG_ENTRY"
          
      - name: Commit and push changes
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Stage and commit the changes
          git add CHANGELOG.md package.json
          git commit -m "chore: bump version to ${{ steps.bump-version.outputs.new_version }}"
          
          # Push directly to main (since we're already on main branch)
          git push origin main
          
          echo "Changes committed and pushed to main"
          
      - name: Create tag
        if: steps.version-bump.outputs.bump_type != 'none'
        run: |
          # Ensure we're on the latest commit
          git pull origin main
          
          # Create and push the tag
          git tag "v${{ steps.bump-version.outputs.new_version }}"
          git push origin "v${{ steps.bump-version.outputs.new_version }}"
          
          echo "Tag v${{ steps.bump-version.outputs.new_version }} created and pushed"
          
      - name: Comment on PR
        if: steps.version-bump.outputs.bump_type != 'none'
        uses: actions/github-script@v6
        with:
          script: |
            const newVersion = "${{ steps.bump-version.outputs.new_version }}";
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Streamlined Versioning Complete!**\n\nVersion bumped to **v${newVersion}**\n\nChanges have been automatically committed to main and tagged.`
            });