name: Branch Management (Example)

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled, closed]
    branches: 
      - develop
      - main
      - 'release/**'

jobs:
  validate_branch_rules:
    name: Validate Branch Rules
    runs-on: ubuntu-latest
    
    steps:
      - name: Check branch naming convention
        uses: deepakputhraya/action-branch-name@master
        with:
          regex: '(feature|fix|docs|refactor|chore|test|release)\/[a-z0-9-_.]+'
          allowed_prefixes: 'feature,fix,docs,refactor,chore,test,release'
          ignore: main,develop
          min_length: 5
          max_length: 50
      
      - name: Validate PR to Develop
        if: github.base_ref == 'develop' && github.event.pull_request.state != 'closed'
        run: |
          # Disallow merging release branches directly to develop
          if [[ "${{ github.head_ref }}" == release/* ]]; then
            echo "::error::Release branches should be merged to main, not develop"
            exit 1
          fi
          
          # Make sure PR has appropriate labels
          echo "Checking for required labels..."
          LABELS="${{ toJson(github.event.pull_request.labels.*.name) }}"
          
          if [[ ! "$LABELS" =~ "ready-for-review" ]]; then
            echo "::warning::This PR should have 'ready-for-review' label before merging"
          fi
          
          # Check if tests are required
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" =~ ^(feat|fix): ]]; then
            echo "Feature or fix detected. Tests should be included."
          fi
      
      - name: Validate PR to Main
        if: github.base_ref == 'main' && github.event.pull_request.state != 'closed'
        run: |
          # Only allow release branches and hotfixes to main
          if [[ ! "${{ github.head_ref }}" =~ ^(release/|hotfix/) ]]; then
            echo "::error::Only release and hotfix branches can be merged to main"
            exit 1
          fi
          
          # Make sure PR has approval
          echo "Checking for required approvals..."
          
          # Make sure PR has appropriate labels
          echo "Checking for required labels..."
          LABELS="${{ toJson(github.event.pull_request.labels.*.name) }}"
          
          if [[ ! "$LABELS" =~ "ready-for-production" ]]; then
            echo "::error::PRs to main must have the 'ready-for-production' label"
            exit 1
          fi

  prepare_release:
    name: Prepare Release Branch
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release/') && github.base_ref == 'develop' && github.event.action == 'opened'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      
      - name: Update package version
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          npm version $VERSION --no-git-tag-version
      
      - name: Update changelog
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create a new version section in changelog
          sed -i "s/## \[Unreleased\]/## \[Unreleased\]\n\n## \[$VERSION\] - $DATE/" CHANGELOG.md
      
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: prepare release ${{ steps.extract_version.outputs.VERSION }}"
          branch: ${{ github.head_ref }}
          file_pattern: CHANGELOG.md package.json package-lock.json